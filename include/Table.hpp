#pragma once

#include "Time.hpp"

/**
 * @class Table
 * @brief Класс, представляющий стол в компьютерном клубе.
 *
 * Класс Table хранит информацию о состоянии стола (занят/свободен),
 * времени начала и окончания занятия, выручке и общем времени занятия.
 * Предоставляет методы для работы с этими данными.
 */
class Table {
    private:
        int table_id; 
        bool occupied;
        int revenue;
        Time start_time;
        Time end_time;
        Time occupied_time;

        public:
        /**
         * @brief Конструктор стола.
         * @param table_id Уникальный идентификатор стола.
         *
         * Инициализирует стол с указанным ID, устанавливает начальные значения:
         * - время занятия: 00:00
         * - статус: свободен
         * - выручка: 0
         * - время начала/окончания: 00:00
         */
        Table(int table_id);
    
        /**
         * @brief Форматирует информацию о столе в строку.
         * @return Строка в формате "ID HH:MM HH:MM сумма статус".
         *
         * Пример: "1 09:00 11:30 200 Занят"
         */
        string format_table() const;
    
        /**
         * @brief Проверяет, занят ли стол.
         * @return true если стол занят, false если свободен.
         */
        bool is_occupied();
    
        /**
         * @brief Устанавливает статус занятости стола.
         * @param true_or_false Новый статус стола (true - занят, false - свободен).
         */
        void set_occupied(bool true_or_false);
    
        /**
         * @brief Устанавливает время начала занятия стола.
         * @param time Время начала занятия.
         */
        void set_start_time(Time time);
    
        /**
         * @brief Устанавливает время окончания занятия стола.
         * @param time Время окончания занятия.
         */
        void set_end_time(Time time);
    
        /**
         * @brief Обновляет общее время занятия стола.
         *
         * Вычисляет разницу между временем окончания и начала,
         * добавляет к общему времени занятия стола.
         */
        void set_occupied_time();
    
        /**
         * @brief Рассчитывает выручку за текущую сессию.
         * @param hour_cost Стоимость часа аренды стола.
         *
         * Округляет время занятия в большую сторону до часов
         * и добавляет к общей выручке стола.
         */
        void set_revenue(int hour_cost);
    
        /**
         * @brief Возвращает общее время занятия стола.
         * @return Объект Time с общим временем занятия.
         */
        Time get_occupied_time();
    
        /**
         * @brief Возвращает общую выручку стола.
         * @return Сумма выручки в денежных единицах.
         */
        int get_revenue();
    
        /**
         * @brief Возвращает время начала текущего занятия.
         * @return Объект Time с временем начала.
         */
        Time get_start_time();
    
        /**
         * @brief Возвращает время окончания текущего занятия.
         * @return Объект Time с временем окончания.
         */
        Time get_end_time();
    };